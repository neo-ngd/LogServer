{"version":3,"sources":["App.js","serviceWorker.js","index.js","api/api.js"],"names":["Log","num","length","len","index","this","padding","props","react_default","a","createElement","className","concat","name","text","Component","LogBox","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","logHandler","log","err","console","state","tags","every","ele","Name","push","setState","tag","data","Key","newdata","api","Regist","_this2","lib","defaultValue","onChange","value","App_LogList","LogList","_this3","onscroll","event","autoScroll","topPosition","realHeight","containerHeight","render","_this4","loglistFunc","map","App_Log","Text","key","scrollArea_default","ref","r","scrollArea","speed","contentClassName","horizontal","verticalScrollbarStyle","width","height","background","marginLeft","onScroll","scrollBottom","App","App_LogBox","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","ws","WebSocket","logger","message","onopen","e","send","onclose","onmessage","logbody","JSON","parse","onerror","exports","cb","readyState","OPEN","Close","close"],"mappings":"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","file":"static/js/main.2a0f40dc.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport api from './api/api';\nimport ScrollArea from 'react-scrollbar';\nimport {Combobox} from 'react-widgets';\nimport 'react-widgets/dist/css/react-widgets.css';\n\nclass Log extends Component {\n  padding(num, length) {\n    for(var len = (num + \"\").length; len < length; len = num.length) {\n        num = \"0\" + num;            \n    }\n    return num;\n  }\n  render() {\n    let index = this.padding(this.props.index, 4);\n    return (\n      <div className=\"log\">\n          <p>\n            <span>\n            {`${index}:[${this.props.name}] ${this.props.text}`}\n            </span>\n          </p>\n      </div>\n    );\n  }\n}\n  \nclass LogBox extends Component {\n  logHandler = (log, err) => {\n    if (err) {\n        console.log(err);\n        return;\n    }\n    if (this.state.tags.every(ele => ele !== log.Name)) {\n      let tags = this.state.tags;\n      tags.push(log.Name);\n      this.setState({tags: tags});\n    }\n    if (this.state.tag !== \"all\" && log.Name !== this.state.tag) \n      return;\n    let index = this.state.data.length + 1;\n    if (10000 < index) {\n        log.Key = 1;\n        this.setState({data: [log]});\n        return;\n    }\n    log.Key = index;\n    let newdata = this.state.data.concat(log);\n    this.setState({data: newdata});\n  }\n  constructor(props) {\n      super(props);\n      this.state = {data: [], tag: \"all\", tags: [\"all\"]};\n  }\n  componentWillMount() {\n  }\n  componentDidMount() {\n    api.Regist(this.state.tag, this.logHandler);\n  }\n\n  render() {\n    return (\n      <div className=\"logBox\">\n        <div className=\"header\">\n          <h1 className=\"title\">Log Monitor</h1>\n          <div>\n            <Combobox\n              defaultValue = {\"all\"}\n              data={this.state.tags}\n              onChange={value => {\n                this.setState({data: [], tag: value});\n                api.Regist(value, this.logHandler);\n              }}\n            />\n          </div>\n        </div>\n        <LogList data={this.state.data} />\n        \n      </div>\n    );\n  }\n}\n  \nclass LogList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = ({autoScroll: true});\n  }\n  componentDidUpdate() {\n    if (this.state.autoScroll)\n      this.scrollArea.scrollBottom();\n  }\n  onscroll = event => {\n    if (!this.state.autoScroll) {\n      if (event.topPosition === event.realHeight - event.containerHeight) {\n        this.setState({autoScroll: true});\n      }\n    }\n    if (this.state.autoScroll) {\n      if (event.topPosition < event.realHeight - event.containerHeight) {\n        this.setState({autoScroll: false});\n      }\n    }\n  }\n  render = function() {\n    var loglistFunc = this.props.data.map(function(log) {\n      return (\n        <Log text={log.Text} name={log.Name} key={log.Key} index={log.Key}/>\n      );\n    });\n    return (\n      <ScrollArea\n        ref = {r => this.scrollArea = r}\n        speed={0.8}\n        className=\"scrollarea\"\n        contentClassName=\"loglist\"\n        horizontal={false}\n        verticalScrollbarStyle={{\n          \"width\": \"8px\",\n          \"height\": \"20px\",\n          \"background\": \"white\",\n          \"marginLeft\": \"0px\",\n        }}\n        onScroll = {this.onscroll}\n      >\n        {loglistFunc}\n      </ScrollArea>\n    );\n  }\n}\n\nclass App extends Component {\n  render() {\n    return (\n        <LogBox />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n","var wsServer = \"ws://localhost:8081/ws/\";//document.location.href.replace(\"http\", \"ws\") + \"ws/\";\nvar ws = new WebSocket(wsServer);\nvar logger = null;\nvar message = \"\";\nws.onopen = function (e) {\n    console.log(\"Connected to WebSocket server.\",e);\n    if (logger) {\n        ws.send(message);\n    }\n};\n\nws.onclose = function (e) {\n    console.log(\"Disconnected\",e);\n};\n\nws.onmessage = function(e) {\n    let logbody = JSON.parse(e.data);\n    if (logger) logger(logbody);\n};\n\nws.onerror = function (e) {\n    console.log('Error occured: ' + e.data,e);\n};\n\nexports.Regist = function(name, cb) {\n    logger = cb;\n    if (ws.readyState === ws.OPEN) {\n        ws.send(name);\n        return;\n    }\n    message = name;\n};\n\nexports.Close = function() {\n    ws.close();\n};"],"sourceRoot":""}